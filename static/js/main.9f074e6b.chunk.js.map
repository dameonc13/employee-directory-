{"version":3,"sources":["components/Tables/index.js","utils/API.js","components/Container/index.js","components/Buttons/index.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["Tables","props","Table","striped","bordered","hover","results","map","result","key","login","uuid","src","picture","thumbnail","alt","name","first","last","phone","email","axios","get","getEmployees","state","search","API","then","res","console","log","setState","data","catch","err","this","Component","Buttons","Button","variant","type","Header","Jumbotron","fluid","InputGroup","className","FormControl","placeholder","aria-label","aria-describedby","Append","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"ySAkCeA,MA/Bf,SAAgBC,GACd,OACE,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC3B,+BACE,4BACE,2CACA,6CACA,0CACA,yCACA,uCAGJ,+BACGJ,EAAMK,QAAQC,KAAI,SAACC,GAAD,OACjB,wBAAIC,IAAKD,EAAOE,MAAMC,MACpB,4BACE,yBACEC,IAAKJ,EAAOK,QAAQC,UACpBC,IAAK,WAAaP,EAAOQ,KAAKC,MAAQ,IAAMT,EAAOQ,KAAKE,QAG5D,4BAAKV,EAAOW,OACZ,4BAAKX,EAAOQ,KAAKC,OACjB,4BAAKT,EAAOQ,KAAKE,MACjB,4BAAKV,EAAOY,c,iBCzBT,EAEC,WACZ,OAAOC,IAAMC,IAAI,kDCoCNC,E,4MApCbC,MAAQ,CACNlB,QAAS,GACTmB,OAAQ,I,kEAGW,IAAD,OAClBC,IACGC,MAAK,SAACC,GACLC,QAAQC,IAAIF,GAEZ,EAAKG,SAAS,CAAEzB,QAASsB,EAAII,KAAK1B,aAEnC2B,OAAM,SAACC,GAAD,OAASL,QAAQC,IAAII,Q,+BAoB9B,OAFAL,QAAQC,IAAIK,KAAKX,MAAMlB,SAEhB,kBAAC,EAAD,CAAQA,QAAS6B,KAAKX,MAAMlB,c,GAjCZ8B,a,wBCQZC,MATf,WACE,OACE,oCACE,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,UAA/B,UAEU,M,eCoBDC,MArBf,WACE,OACE,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAAC,IAAD,KACE,4BACE,kBAACC,EAAA,EAAD,CAAYC,UAAU,QACpB,kBAACC,EAAA,EAAD,CACEC,YAAY,sBACZC,aAAW,sBACXC,mBAAiB,iBAEnB,kBAACL,EAAA,EAAWM,OAAZ,KACE,kBAAC,EAAD,SAIN,2F,MCNOC,MATf,WACE,OACE,yBAAKN,UAAU,OACb,kBAAC,EAAD,MACA,kBAACO,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,MAAK,SAAAsC,GACjCA,EAAaC,kB","file":"static/js/main.9f074e6b.chunk.js","sourcesContent":["import Table from \"react-bootstrap/Table\";\r\nimport React from \"react\";\r\n\r\nfunction Tables(props) {\r\n  return (\r\n    <Table striped bordered hover>\r\n      <thead>\r\n        <tr>\r\n          <th>Staff Photo</th>\r\n          <th>Ofiice Number</th>\r\n          <th>First Name</th>\r\n          <th>Last Name</th>\r\n          <th>Email</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {props.results.map((result) => (\r\n          <tr key={result.login.uuid}>\r\n            <td>\r\n              <img\r\n                src={result.picture.thumbnail}\r\n                alt={\"Employee\" + result.name.first + \" \" + result.name.last}\r\n              />\r\n            </td>\r\n            <td>{result.phone}</td>\r\n            <td>{result.name.first}</td>\r\n            <td>{result.name.last}</td>\r\n            <td>{result.email}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n}\r\nexport default Tables;\r\n","import axios from \"axios\";\n\nexport default {\n  // Gets all users\n  getEmployees: function () {\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\n  },\n};\n","import React, { Component } from \"react\";\r\nimport Tables from \"../Tables\";\r\nimport API from \"../../utils/API\";\r\n\r\nclass getEmployees extends Component {\r\n  state = {\r\n    results: [],\r\n    search: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    API.getEmployees()\r\n      .then((res) => {\r\n        console.log(res);\r\n\r\n        this.setState({ results: res.data.results });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }\r\n\r\n  /*   handleInputChange = event => {\r\n      const value = event.target.value;\r\n      const name = event.target.name;\r\n      this.setState({\r\n        [name]: value\r\n      });\r\n    };\r\n  \r\n    \r\n    handleFormSubmit = event => {\r\n      event.preventDefault();\r\n      \r\n    };  */\r\n\r\n  render() {\r\n    console.log(this.state.results);\r\n\r\n    return <Tables results={this.state.results} />;\r\n  }\r\n}\r\n\r\nexport default getEmployees;\r\n","import Button from \"react-bootstrap/Button\";\r\nimport React from \"react\";\r\n\r\nfunction Buttons() {\r\n  return (\r\n    <>\r\n      <Button variant=\"primary\" type=\"submit\">\r\n        Search\r\n      </Button>{\" \"}\r\n    </>\r\n  );\r\n}\r\nexport default Buttons;\r\n","import Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport React from \"react\";\r\nimport Buttons from \"../Buttons\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <Jumbotron fluid>\r\n      <Container>\r\n        <h1>\r\n          <InputGroup className=\"mb-3\">\r\n            <FormControl\r\n              placeholder=\"Enter Employee Name\"\r\n              aria-label=\"Enter Employee Name\"\r\n              aria-describedby=\"basic-addon2\"\r\n            />\r\n            <InputGroup.Append>\r\n              <Buttons />\r\n            </InputGroup.Append>\r\n          </InputGroup>\r\n        </h1>\r\n        <p>Sort by Name or use the search bar to narrow your results</p>\r\n      </Container>\r\n    </Jumbotron>\r\n  );\r\n}\r\nexport default Header;\r\n","import React from \"react\";\n// import Main from \"./components/Main\";\n// import Wrapper from \"./components/Wrapper\";\nimport Container from \"./components/Container\";\nimport Header from \"./components/Header\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Container />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}